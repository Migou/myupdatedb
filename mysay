# prints a message to screen
#
# part of package myupdatedb>myrequire>mysay
# x>y means program x can call program y

while echo "$1" | grep ^- > /dev/null 
do
  case "$1" in 
    -v) shift; verbose=1;;
  esac
done

message=$1

if test -n "$verbose"
then
	# récupère le nom du processus appelant, ainsi que son ppid

	#echo ppid number for $$
	#ps -o ppid $$ | grep -v PPID
	ppid=`ps -o ppid $$ | grep -v PPID`

	#ps -eo pid,command $ppid | grep "^ *$ppid"
	#echo ppid name 
	#ps -eo pid,command $ppid | grep "^ *$ppid" | sed 's|^ *\([0-9][0-9]*\)  *\(.*\)|\2\(\1\)|' 
	#exit
	parent_proc_name=`ps -eo pid,command $ppid | grep "^ *$ppid" | sed 's|^ *\([0-9][0-9]*\)  *\(.*\)|\2\(\1\)|' `
	prefix="$parent_proc_name : ";
fi


if [ -n `which xcowsay` ]
then
	xcowsay "$prefix$message"
	exit 1
fi

if [ -z `which zenity` ]
then
	myrequire zenity
fi

if [ -n `which zenity` ]
then
	zenity --info --text="$message" --title="message from $parent_proc_name"
	exit 1
fi


if [ -n `which say` ]
then
	say "$prefix$message"
	exit 1
fi

echo "$prefix$message"


